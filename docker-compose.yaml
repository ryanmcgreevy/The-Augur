
#THE FOLLOWING IS FOR A GENERIC 3 NODE ELASTIC CLUSTER FOR REFERENCE
#USES DOCKER VOLUMES INSTEAD OF BIND MOUNTS LIKE THE AUGUR CURRENTLY USES FOR EASE OF DATA TRANSFER
services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - ${CERTS}:/usr/share/elasticsearch/config/certs
    user: "0"    
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    restart: unless-stopped
    volumes:
      - ${CERTS}:/usr/share/elasticsearch/config/certs
      - ${ESDATA01}:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
      - network.host=0.0.0.0
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    restart: unless-stopped
    volumes:
      - ${CERTS}:/usr/share/kibana/config/certs
      - ${KIBANADATA}:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - server.host=0.0.0.0
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # chromadb:
  #   image: chromadb/chroma:1.0.5
  #   restart: unless-stopped
  #   volumes:
  #     - ${DB}:/data
  #   ports:
  #     - 8000:8000
  #   networks:
  #     - botnet
  theaugur-1:
    container_name: 'theaugur-1'
    build:
      context: .
    image: ghcr.io/ryanmcgreevy/augur:latest
    restart: unless-stopped
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DISCORD_TOKEN: ${DISCORD_TOKEN}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTIC_URL: es01
      CHROMA_URL: chromadb
      CHROMA_PORT: 8000
      SHARD_COUNT: 1
      SHARD_ID: 0
    volumes:
      - ${STORE_LOCATION}:/app/store_location
      #- ${CONTEXT_FILES}:/app/context_files
    depends_on:
      # chromadb:
      #   condition: service_started
        es01:
          condition: service_healthy
    #network_mode: host
    # networks:
    #   - botnet
  # theaugur-2:
  #   container_name: 'theaugur-2'
  #   environment:
  #     SHARD_ID: 1
  #   extends:
  #     service: theaugur-1
  crawler:
    build:
      context: ./utils/
    image: ghcr.io/ryanmcgreevy/augur-crawler:latest
    restart: unless-stopped
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ELASTIC_URL: es01
      CHROMA_URL: chromadb
      CHROMA_PORT: 8000
    volumes:
      - ${STORE_LOCATION}:/app/store_location
      - ${ESO_NEWS}:/app/eso_news
    depends_on:
      es01:
        condition: service_healthy
      # chromadb:
      #   condition: service_started
    #network_mode: host
#     networks:
#       - botnet
# networks:
#   botnet:
#     driver: bridge
volumes:
  db:
    external: true
  store_location:
    external: true
  eso_news:
    external: true
  certs:
    external: true
  esdata01:
    external: true
  kibanadata:
    external: true
      
